% -*- mode: poly-noweb; noweb-code-mode: mizar-mode; -*-
\appendix
\section{Environment directives}
The environment directives are perhaps the most confusing aspect of
Mizar, so I decided to stick this into an appendix.

<<Environment for [[float_1.miz]]>>=
environ
 <<[[float_1.miz]] vocabularies>>
 <<[[float_1.miz]] notations>>
 <<[[float_1.miz]] constructors>>
 <<[[float_1.miz]] registrations>>
 <<[[float_1.miz]] requirements>>
 <<[[float_1.miz]] theorems>>
 <<[[float_1.miz]] schemes>>
@

\subsection{Vocabularies}
Mizar doesn't actually know what to tokenize: we need to tell it what
the terms are, to distinguish them from identifiers of variables. The
[[vocabularies]] directive adds new reserved words for the lexer to discover.
We begin by importing the vocabularies for the
extended real number system.

The token ``$-$'' used for subtraction is defined in [[RELAT_1]].

The [[Real]] type and [[Integer]] type are provided by the [[REAL_1]]
and [[INT_1]] vocabularies.

For the absolute value, this is defined in [[COMPLEX1]].

The attribute [[normal]] is present in the [[PRE_TOPC]] vocabulary, so
we need to include it. Similarly, the attribute [[subnormal]] appears in
[[FUZNUM_1]]'s vocabulary, so we need to include it.

Mizar reserves parentheses for tuples in the metalogic (i.e.,
first-order logic terms) and writes $f(t)$ for functions in logic (as
opposed to functions in mathematics). To write function application
using a mathematical function, Mizar uses the notation [[f.t]] as
defined in [[FUNCT_1]]. Sequences are just functions whose domain is
$\NN_{0}$ (the non-negative integers).

We need to include [[ORDINAL2]] for [[lim]] and [[SEQ_2]] for
convergence of sequences.

<<[[float_1.miz]] vocabularies>>=
vocabularies NUMBERS, ORDINAL1, CARD_1, SUBSET_1, XBOOLE_0, ARYTM_2, ARYTM_3,
  ZFMISC_1, XCMPLX_0, XREAL_0, XXREAL_0, TARSKI, FUNCT_1, FUNCT_7, RELAT_1,
  REAL_1, INT_1, PREPOWER, POWER, ARYTM_1, NAT_1, COUNTERS,
  COMPLEX1, FINSET_1, NEWTON, PRE_TOPC, FUZNUM_1, SEQ_1, ORDINAL2, SEQ_2,
  FLOAT_1;
@

\subsection{Notations}
The notations directive helps the parser form ``sentence diagrams''
[parse trees] for terms and expressions. This uses the patterns as they
appear in definitions. It's not uncommon for Mathematicians to use the
same word to mean different things (e.g., a \emph{parabolic} subgroup, a
\emph{parabolic} cylinder, a \emph{parabolic} differential equation, etc.).
The notations directive lists articles where the definitions may be
found, and uses the type system to discern which definition fits the usage.

<<[[float_1.miz]] notations>>=
notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, ORDINAL1, ARYTM_2, ARYTM_3,
  XXREAL_3, NUMBERS, XCMPLX_0, XXREAL_0, XREAL_0, NEWTON, FUNCT_1,
  NAT_1, INT_1, COUNTERS, COMPLEX1, FINSET_1, SEQ_1, SEQ_2,
  PREPOWER, POWER;
@ 

\subsection{Constructors}
The constructors directive helps Mizar determine \emph{which} definition
to use for each term. We need to refer to the elementary arithmetic
operators defined in [[XCMPLX_0]]. We also need [[Integer]] type defined
in [[INT_1]]. We rely on definitions found in [[PREPOWER]] and [[POWER]]
for $x^{y}$.

We need to include [[COMSEQ_2]] on complex sequences for the definition
of a limit of a real sequence (definition 7 of [[SEQ_2]]) to make sense.

<<[[float_1.miz]] constructors>>=
constructors ARYTM_2, ARYTM_3, NUMBERS, XCMPLX_0, XXREAL_0, XXREAL_3,
  XREAL_0, FUNCT_1, NAT_1, INT_1,
  COMPLEX1, NEWTON, FINSET_1, COUNTERS, PREPOWER, POWER, SEQ_1,
  COMSEQ_2, SEQ_2;
@ 

\subsection{Registrations}
Attributes need to be registered as an adjective for a type. Further,
some attributes imply others (e.g., [[natural]] numbers are [[complex]]
automatically) which are handled by registrations.

For positive Integers, we need to use [[NUMBER01]]. We need [[NUMBERS]]
to register facts like $\RR$ is a nonempty set.

<<[[float_1.miz]] registrations>>=
registrations ORDINAL1, XBOOLE_0, COUNTERS, NUMBERS, NUMBER01,
  XCMPLX_0, XXREAL_0, XREAL_0, XXREAL_3, FINSET_1, RAT_1, NAT_1, INT_1,
  FOMODEL0, NEWTON;
@ 

\subsection{Requirements}
Mizar allows us to simplify various things automatically which are part
of a mathematician's subconscious, like identifying $\emptyset$ with $0$.

<<[[float_1.miz]] requirements>>=
requirements REAL, SUBSET, BOOLE, NUMERALS, ARITHM;
@ 
% Equalities
% Expansions
% \subsection{Definitions}

\subsection{Theorems}
When using theorems from other Mizar articles, we need to tell Mizar
which articles we will be relying on.

<<[[float_1.miz]] theorems>>=
theorems ARYTM_2, ARYTM_3, CARD_1, COMPLEX1, COUNTERS, ENUMSET1,
  FINSET_1, FUNCT_2, INT_1, NAT_1, NUMBERS, ORDINAL1, ORDINAL2, ORDINAL3, POWER,
  SEQ_2, SUBSET_1, TARSKI, XBOOLE_0, XBOOLE_1, XCMPLX_0, XCMPLX_1,
  XREAL_0, XREAL_1, XXREAL_0, XXREAL_3, XTUPLE_0, ZFMISC_1;
@ 

\subsection{Schemes}
Schemes are theorems with free second-order variables (i.e.,
parametrized by terms and/or predicates). They're useful when we want,
e.g., to construct a sequence using a formula.

<<[[float_1.miz]] schemes>>=
schemes NAT_1, RECDEF_1, SEQ_1;
@ 