:: Floating-point Arithmetic
:: by Alexander M. Nelson
::
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ
 vocabularies NUMBERS, ORDINAL1, CARD_1, SUBSET_1, XBOOLE_0, ARYTM_2, ARYTM_3,
   ZFMISC_1, XCMPLX_0, XXREAL_0, TARSKI, FUNCT_7,
   REAL_1, INT_1, PREPOWER, POWER, ARYTM_1,
   FLOAT_1;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, ORDINAL1, ARYTM_2, NUMBERS,
   XCMPLX_0, XXREAL_0, XREAL_0, INT_1,
   PREPOWER, POWER;
 constructors ARYTM_2, NUMBERS, XCMPLX_0, XXREAL_0, XREAL_0, INT_1,
   PREPOWER, POWER;
 registrations ORDINAL1, XBOOLE_0, XCMPLX_0, XXREAL_0, XREAL_0, INT_1, RAT_1;
 requirements REAL, SUBSET, BOOLE, NUMERALS, ARITHM;
 theorems INT_1, POWER, XREAL_1, XXREAL_0;

begin :: Preliminaries

definition
  let IT be Real;
  attr IT is valid_radix means :Def1:
  IT > 1;
end;

registration
  cluster valid_radix for Real;
  existence
  proof
    take x=2;
    thus thesis by Def1;
  end;
end;

registration
  cluster valid_radix -> positive for Real;
  coherence by Def1, XXREAL_0:def 6;
end;

reserve b for valid_radix Real;

theorem
  for x being positive Real
  for N being Integer
  st b to_power N <= x & x < b to_power (N + 1)
  holds N = [\ log(b, x) /]
proof
  let x be positive Real;
  let N be Integer;
  assume A1: b to_power N <= x;
  assume A2: x < b to_power (N + 1);
  A3: b <> 1 & b > 1 by Def1;

  A4: N <= log(b, x)
  proof
    b to_power N = x or b to_power N < x by A1, XXREAL_0:1;
    then per cases;
    suppose b to_power N = x;
      hence thesis by A3, POWER:def 3;
    end;
    suppose A5: b to_power N < x;
      A6: b to_power N > 0 by POWER:34;
      then N = log(b, b to_power N) by A3, POWER:def 3;
      hence thesis by A3, A5, A6, POWER:57;
    end;
  end;
  log(b,x) < N + 1
  proof
    b to_power (N + 1) > 0 by POWER:34;
    then N + 1 = log(b, b to_power (N + 1)) by A3, POWER:def 3;
    hence log(b,x) < (N+1) by A2, A3, POWER:57;
  end;
  then log(b,x) - 1 < (N + 1) - 1 by XREAL_1:14;
  hence thesis by A4, INT_1:def 6;
end;

