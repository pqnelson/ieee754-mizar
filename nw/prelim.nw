% -*- mode: poly-noweb; noweb-code-mode: mizar-mode; -*-
\section{Preliminaries}

<<Preliminaries>>=
begin :: Preliminaries

<<Definition: valid radix>>

<<Cluster: existence of valid radix number>>

<<Registration: valid radix implies positive>>

<<Reserve: $b$ refers to a valid radix real number>>

<<Theorem: exponent for $b$-expansion of $x$ is $\lfloor\log_{b}(x)\rfloor$>>

<<Theorem: $1\leq x b^{-\lfloor\log_{b}(x)\rfloor}<b$>>

<<Subsection: Defining the extended integers>>
@

\subsection{Valid radix for a non-integer base of numeration}
We will give a generalization of the positional numeral system for a
radix $\beta\in\RR$ such that $\beta>1$. Mizar formalizes positional
number systems in \texttt{[NUMERAL1]}, and we will be consistent with
the notation taken there.

Before getting ahead of ourselves, we need to formalize the notion that
a real number is a valid radix --- that is to say, that $\beta>1$.

\begin{definition}
Let $\beta\in\RR$. We define the attribute $\beta$ is a \define{Valid Radix}
if $\beta>1$.
\end{definition}

<<Definition: valid radix>>=
definition
  let IT be Real;
  attr IT is valid_radix means :Def1:
  IT > 1;
end;
@ %def valid_radix

\begin{voc}
We need to add [[valid_radix]] as an attribute to our vocabulary file.
\end{voc}

<<DICT/float-1.voc>>=
Vvalid_radix
@ 

\begin{registration}
We observe that there exists a valid radix real number (which allows us
to use [[valid_radix]] as an adjective).
\end{registration}

\begin{proof}[Proof sketch]
We just need to prove there exists a real number $x$ such that $x$ is a
valid radix. For example, $x=2$ is such a number.
\end{proof}

<<Cluster: existence of valid radix number>>=
registration
  cluster valid_radix for Real;
  existence
  proof
    take x=2;
    thus thesis by Def1;
  end;
end;
@

\begin{registration}
We observe that valid radix numbers are positive.
\end{registration}

\begin{proof}[Proof sketch]
We just need to prove that for each real number $x$ such that $x$ is a
valid radix that $x$ is positive. But this follows from the definition
of ``positive'' ([[XXREAL_0:def 6]]) and the definition for a valid radix.
\end{proof}

<<Registration: valid radix implies positive>>=
registration
  cluster valid_radix -> positive for Real;
  coherence by Def1, XXREAL_0:def 6;
end;
@

\subsection{Non-integer base of numeration}
Now, when we consider a non-integer base of numeration $\beta>1$ for a
real number $x\in\RR$, we are considering a [possibly infinite] sequence
of finite expansions
\begin{equation}
x = d_{0}d_{1}\cdots d_{n-1}.d_{n}\cdots d_{n+m-1}\dots
\end{equation}
where the $n^{\text{th}}$ entry in the sequence is
$D_{n} = (d_{0},d_{1},\dots,d_{n-1})$. This describes the truncated expansion to
$n$ digits.

The \textsc{ieee} standard, however, works in scientific notation,
writing something like
\begin{equation}
x = d_{0}.d_{1}\cdots d_{n+m-1}\times\beta^{n-1},
\end{equation}
or as the product of an integer with $\beta^{-m}$,
\begin{equation}
x = d_{0}d_{1}\cdots d_{n+m-1}\times\beta^{-m}.
\end{equation}
How do we determine these digits $d_{j}$?

For any positive real number $x>0$, we observe there exists an
integer $N$ such that $\beta^{N}\leq x<\beta^{N+1}$. Then
\begin{equation}
d_{0}=\lfloor x/\beta^{N}\rfloor,\quad\mbox{and}\quad r_{0}=(x/\beta^{N})-d_{0},
\end{equation}
and inductively, for any natural number $j$,
\begin{equation}
d_{j+1}=\lfloor\beta r_{j}\rfloor,\quad\mbox{and}\quad r_{j+1}=(\beta r_{j})-d_{j+1}.
\end{equation}
This produces a canonical sequence of digits which is precisely the
$\beta$-expansion of $x$:
\begin{equation}
x = \sum^{\infty}_{j=0}d_{j}\beta^{N-j}.
\end{equation}
We need to construct the sequence $\{D_{n}\}_{n\in\NN_{0}}$ consisting
of the finite sequences $D_{n}=(d_{0},\dots,d_{n})$ so we might use it
in determining the floating-point number corresponding to $x$ in base
$\beta$.

Mizar implements $x^{y}$ for any $x,y\in\RR$ as ``[[x to_power y]]'' in
Definition [[POWER:def 2]]. For our interests, we will be considering
$\beta^{n}$ for $n\in\ZZ$, which is implemented as ``[[beta #Z n]]''
as defined in Definition [[PREPOWER:def 3]].

\begin{reserve}
We will use $b$ to refer to any valid radix real number.
\end{reserve}

<<Reserve: $b$ refers to a valid radix real number>>=
reserve b for valid_radix Real;
@

\begin{theorem}
Let $x\in\RR$ be positive, let $N\in\ZZ$.
Then $b^{N}\leq x<b^{N+1}$ if and only if $N=\lfloor\log_{b}(x)\rfloor$.
\end{theorem}

\begin{proof}[Proof sketch]
As this is an ``iff'' proof, we will need to provide two proofs (one for
each direction).

The forward direction is straightforward.
We will prove that $N\leq\log_{b}(x)$ and $\log_{b}(x)<N+1$, which
implies the result by definition of $\lfloor-\rfloor$.

The backwards direction
\end{proof}

<<Theorem: exponent for $b$-expansion of $x$ is $\lfloor\log_{b}(x)\rfloor$>>=
theorem Th1:
  for x being positive Real
  for N being Integer
  holds (b to_power N <= x & x < b to_power (N + 1))
  iff N = [\ log(b, x) /]
proof
  let x be positive Real;
  let N be Integer;
  thus (b to_power N <= x & x < b to_power (N + 1)) implies N = [\ log(b, x) /]
  proof
    assume A1: b to_power N <= x;
    assume A2: x < b to_power (N + 1);
    A3: b <> 1 & b > 1 by Def1;
    
    A4: N <= log(b, x)
    <<Subproof: $N\leq\log_{b}(x)$>>
    log(b,x) < N + 1
    <<Subproof: $\log_{b}(x)<N+1$>>
    then log(b,x) - 1 < (N + 1) - 1 by XREAL_1:14;
    hence thesis by A4, INT_1:def 6;
  end;
  thus N = [\ log(b, x) /] implies (b to_power N <= x & x < b to_power (N + 1))
  <<Subproof: $N\lfloor\log_{b}(x)\rfloor$ implies $b^{N}\leq x<b^{N+1}$>>
end;
@ %def Th1

\begin{proof}[Subproof ($N\leq\log_{b}(x)$)]
We can consider two cases from the assumption $b^{N}\leq x$: either
$b^{N} = x$ or $b^{N}<x$. In the first case, we find $b^{N}=x$ implies
$N=\log_{b}(x)$ by the definition of the logarithm. In the second case,
when $b^{N}<x$, since $b^{N}>0$, we find $N=\log_{b}(b^{N})$ by the law
of logarithms, and then we obtain the result since Theorem [[POWER:57]]
proves $\alpha>1$ and $\beta>0$ and $\gamma>\beta$ implies
$\log_{\alpha}(\gamma) > \log_{\alpha}(\beta)$.
\end{proof}

<<Subproof: $N\leq\log_{b}(x)$>>=
proof
  b to_power N = x or b to_power N < x by A1, XXREAL_0:1;
  then per cases;
  suppose b to_power N = x;
    hence thesis by A3, POWER:def 3;
  end;
  suppose A5: b to_power N < x;
    A6: b to_power N > 0 by POWER:34;
    then N = log(b, b to_power N) by A3, POWER:def 3;
    hence thesis by A3, A5, A6, POWER:57;
  end;
end;
@ 

\begin{proof}[Subproof ($\log_{b}(x)<N+1$)]
We see that $b>1$, $x>0$, and $x<b^{N+1}$ implies $\log_{b}(x)<N+1$
thanks to Theorem [[POWER:57]].
\end{proof}

<<Subproof: $\log_{b}(x)<N+1$>>=
proof
  b to_power (N + 1) > 0 by POWER:34;
  then N + 1 = log(b, b to_power (N + 1)) by A3, POWER:def 3;
  hence log(b,x) < (N+1) by A2, A3, POWER:57;
end;
@ 

\begin{proof}[Subproof ($N\lfloor\log_{b}(x)\rfloor$ implies $b^{N}\leq x<b^{N+1}$)]
Assuming $N=\lfloor\log_{b}(x)\rfloor$, we can see that
$N\leq\lfloor\log_{b}(x)\rfloor<N+1$. Then it's straightforward using
the properties of exponentiation to see the result.
\end{proof}

<<Subproof: $N\lfloor\log_{b}(x)\rfloor$ implies $b^{N}\leq x<b^{N+1}$>>=
proof
  assume N = [\ log(b, x) /];
  then N <= log(b, x) & log(b,x) - 1 < N by INT_1:def 6;
  then N <= log(b, x) & log(b,x) - 1 + 1 < N + 1 by XREAL_1:8;
  then A1: N <= log(b, x) & log(b, x) < N + 1;
  A2: b to_power N <= b to_power (log(b,x))
    & b to_power (log(b,x)) < b to_power (N + 1)
  proof
    B1: b > 1 by Def1;
    thus b to_power N <= b to_power (log(b,x))
    proof
      per cases by A1, XXREAL_0:1;
      suppose N = log(b, x);
        hence thesis;
      end;
      suppose N < log(b, x);
        hence thesis by B1, POWER:39;
      end;
    end;
    thus b to_power (log(b,x)) < b to_power (N + 1) by A1, B1, POWER:39;
  end;
  b > 0 & b <> 1 by Def1;
  hence (b to_power N <= x & x < b to_power (N + 1)) by A2, POWER:def 3;
end;
@ 

\begin{theorem}
Let $x\in\RR$ be positive. Let $N=\lfloor\log_{b}(x)\rfloor$.
Then $1\leq x b^{-N}<b$.
\end{theorem}

\begin{proof}[Proof sketch]
Using the previous theorem, we see that $b^{N}\leq x<b^{N+1}$,
so multiplying through by $b^{-N}$ yields the results (using a few
identities involving powers).
\end{proof}

<<Theorem: $1\leq x b^{-\lfloor\log_{b}(x)\rfloor}<b$>>=
theorem Th2:
  for x being positive Real
  holds 1 <= x * (b to_power (-[\ log(b, x) /]))
           & x * (b to_power (-[\ log(b, x) /])) < b
proof
  let x be positive Real;
  set N = [\ log(b, x) /];
  A1: b > 0 & b <> 1 by Def1;
  A2: b to_power N > 0 by POWER:34;
  A3: (b to_power N) * (b to_power (- N))
     = b to_power (N + (- N)) by POWER:27
    .= 1 by POWER:24;

  thus 1 <= x * (b to_power (- N))
  proof
    set z = b to_power N;
    1 / z = b to_power (- N) by POWER:28;
    hence 1 <= x * (b to_power (- N)) by A2, A3, Th1, XREAL_1:64;
  end;

  thus x * (b to_power (- N)) < b
  proof
    b to_power (N + 1) = (b to_power 1) * (b to_power N) by POWER:27
                      .= b * (b to_power N) by POWER:25;
    then B1: (b to_power (N + 1)) * (b to_power (- N))
     = b * ((b to_power N) * (b to_power (- N)))
    .= b by A3;
    0 < (b to_power (- N)) by POWER:34;
    hence x * (b to_power (- N)) < b by Th1, B1, XREAL_1:68;
  end;
end;
@ %def Th2

\subsection{Extended Integers}
We will need to define the extended integers for usage as exponents in
floating-point formats. This is in analogy to the extended reals, which
just adjoins infinities to the integers. We will follow the
formalization of extended natural numbers in the Mizar article [[COUNTERS]]
for guidance in which theorems to prove.

<<Subsection: Defining the extended integers>>=
<<Definition: Extended Integers>>

<<Theorem: $\ExtNN\properSubset\ExtZZ$ and $\ExtZZ\properSubset\ExtRR$>>

<<Register: $\ExtZZ$ is nonempty and infinite>>

<<Definition: [[ext-integer]] attribute>>

<<Register: $\pm\infty\in\ExtZZ$, $\ExtNN\subset\ExtZZ\subset\ExtRR$>>

<<Register: zero and nonzero extended integers, applicability of [[ext-integer]] to elements of $\ExtNN$, $\ExtZZ$>>

<<Define: [[ExtInt]] type>>

<<Register: sethood for [[ExtInt]]>>

<<Theorem: $\forall x, x\in\ExtZZ\iff x\in\ZZ\lor x=-\infty\lor x=+\infty$>>

<<Register: 0 is an extended integer, as are integers>>

<<Register: ``natural'' numbers are ``extended integer'' numbers>>

<<Register: positive, negative, non-negative, non-positive are adjectives for extended integers>>

<<Register: negating an extended integer is an extended integer>>

<<Register: Addition, multiplication, maximum, and minimum of extended integers are extended integers.>>

<<Register: subtracting extended integers yields an extended integer>>

<<Register: non-negative extended integers are extended naturals>>

<<Theorem: positive extended integers are either positive integers or $+\infty$>>

<<Theorem: negative extended integers are either negative integers or $-\infty$>>
@ 

\begin{definition}
We define the \define{Extended Integers} to be the subset $\ExtZZ$ of
the extended reals $\ExtRR$ such that $\ExtZZ=\ZZ\cup\{\pm\infty\}$.
\end{definition}

\begin{proof}[Proof (well-definedness)]
Mizar requires we prove newly defined terms are well-defined. For terms
defined using [[equals]], this amounts to showing the type for the
explicitly given term is correct.
We need to prove that this term we construct \emph{really is} a subset
of $\ExtRR$, which boils down to showing $\{\pm\infty\}\subset\ExtRR$
and $\ZZ\subset\ExtRR$, then their union is precisely a subset of $\ExtRR$.
\end{proof}

<<Definition: Extended Integers>>=
definition
  func ExtINT -> Subset of ExtREAL equals
  INT \/ {-infty,+infty};
  coherence
  proof
    INT c= REAL & REAL c= ExtREAL by XBOOLE_0:def 8, NUMBERS:5,31; then
    A1: INT c= ExtREAL by XBOOLE_1:1;
    {-infty,+infty} c= ExtREAL by XBOOLE_1:7, XXREAL_0:def 4;
    hence thesis by A1, XBOOLE_1:8;
  end;
end;
@ %def ExtINT

\begin{voc}
We will tell Mizar to add [[ExtINT]] as a new constant for its lexer to
recognize.
\end{voc}

<<DICT/float-1.voc>>=
OExtINT
@ 

\begin{theorem}
We see that $\ZZ\properSubset\ExtZZ$, $\ExtNN\properSubset\ExtZZ$, and $\ExtZZ\properSubset\ExtRR$.
\end{theorem}

\begin{proof}[Proof sketch]
We see that $+\infty\in\ExtZZ$ but $+\infty\notin\ZZ$, which proves the
first claim. Similarly, we see $-\infty\in\ExtZZ$ but
$-\infty\notin\ExtNN$, which proves the second claim. And there exists
some $x\in\RR$ such that $x\notin\ZZ$, and $x\notin\{\pm\infty\}$, which
gives us some $x\in\ExtRR$ but $x\notin\ExtZZ$ establishing the third claim.
\end{proof}

<<Theorem: $\ExtNN\properSubset\ExtZZ$ and $\ExtZZ\properSubset\ExtRR$>>=
theorem Th2:
  INT c< ExtINT & ExtNAT c< ExtINT & ExtINT c< ExtREAL
proof
  thus INT c< ExtINT
  proof
    +infty in {+infty,-infty} by TARSKI:def 2; then
    A1: +infty in ExtINT by XBOOLE_0:def 3;
    not +infty in INT;
    hence thesis by A1, XBOOLE_0:def 8, XBOOLE_1:7;
  end;
  thus ExtNAT c< ExtINT
  proof
    -1 in INT & not -1 in NAT & not -1 in {+infty} by INT_1:def 1;
    then A2: -1 in ExtINT & not -1 in ExtNAT by XBOOLE_0:def 3;
    NAT c= INT & {+infty} c= {-infty,+infty} by NUMBERS:17, ZFMISC_1:7;
    hence thesis by A2, COUNTERS:def 1, XBOOLE_1:13, XBOOLE_0:def 8;
  end;
  thus ExtINT c< ExtREAL
  proof
    not REAL c= INT by XBOOLE_0:def 10, NUMBERS:15,25;
    then consider x being object such that
    A3: x in REAL & not x in INT
    by TARSKI:def 3; 
    not x in {-infty,+infty} by A3, TARSKI:def 2;
    then x in ExtREAL & not x in ExtINT by A3, XXREAL_0:def 4, XBOOLE_0:def 3;
    hence thesis by XBOOLE_0:def 8;
  end;
end;
@ %def Th2

\begin{registration}
The set $\ExtZZ$ is nonempty and infinite.
\end{registration}

<<Register: $\ExtZZ$ is nonempty and infinite>>=
registration
  cluster ExtINT -> non empty infinite;
  coherence by Th2, FINSET_1:1, XBOOLE_0:def 8;
end;
@

\begin{definition}
Let $x$ be an object. We say $x$ is \define{ext-integer} if $x\in\ExtZZ$.
\end{definition}

<<Definition: [[ext-integer]] attribute>>=
definition
  let x be object;
  attr x is ext-integer means :Def2:
  x in ExtINT;
end;
@ %def ext-integer Def2

\begin{voc}
We will tell Mizar to add [[ext-integer]] as a new attribute for its lexer to
recognize.
\end{voc}

<<DICT/float-1.voc>>=
Vext-integer
@

\begin{registration}
We note that $\pm\infty$ is an extended-integer; extended integers are
also extended reals; and extended naturals are extended integers.
\end{registration}

<<Register: $\pm\infty\in\ExtZZ$, $\ExtNN\subset\ExtZZ\subset\ExtRR$>>=
registration
  cluster +infty -> ext-integer;
  coherence
  proof
    +infty in {+infty,-infty} by TARSKI:def 2;
    hence thesis by XBOOLE_0:def 3;
  end;
  cluster -infty -> ext-integer;
  coherence
  proof
    -infty in {+infty,-infty} by TARSKI:def 2;
    hence thesis by XBOOLE_0:def 3;
  end;
  cluster ext-integer -> ext-real for object;
  coherence;
  cluster ext-natural -> ext-integer for object;
  coherence
  proof
    let x be object;
    assume x is ext-natural;
    then x in ExtNAT by COUNTERS:def 2;
    hence thesis by Th2, TARSKI:def 3, XBOOLE_0:def 8;
  end;
end;
@

\begin{registration}
We observe there are zero and nonzero extended integers, and the
adjective ``extended-integer'' applies to elements of $\ExtNN$ as well
as $\ExtZZ$.
\end{registration}

<<Register: zero and nonzero extended integers, applicability of [[ext-integer]] to elements of $\ExtNN$, $\ExtZZ$>>=
registration
  cluster zero ext-integer for object;
  existence
  proof
    take 0;
    thus thesis;
  end;
  cluster non zero ext-integer for object;
  existence
  proof
    take 1;
    thus thesis;
  end;
  cluster ext-integer for set;
  existence
  proof
    take 0;
    thus thesis;
  end;
  cluster -> ext-integer for Element of ExtINT;
  coherence;
  cluster -> ext-integer for Element of ExtNAT;
  coherence;
end;
@

\begin{definition*}
We now define the shorthand \define{ExtInt} for an extended-integer-like
Extended real number.
\end{definition*}

Note that this is an un-numbered definition to Mizar, because it's
literally an abbreviation.

<<Define: [[ExtInt]] type>>=
definition
  mode ExtInt is ext-integer ExtReal;
end;
@ %def ExtInt

\begin{voc}
We tell Mizar about this new type [[ExtInt]].
\end{voc}

<<DICT/float-1.voc>>=
MExtInt
@

\begin{registration}
We note that the type [[ExtInt]] can be used interchangeably as
``element of Extended Integers'', and thus we instruct Mizar
accordingly. The technical jargon is that [[ExtInt]] has the ``sethood''
property (i.e., there exists a set of all [[ExtInt]]s).
\end{registration}

<<Register: sethood for [[ExtInt]]>>=
registration
  sethood of ExtInt
  proof
    take ExtINT;
    thus thesis by Def2;
  end;
end;
@

\begin{theorem}
Let $x$ be any object. Then $x\in\ExtZZ$ if and only if $x\in\ZZ$ or
$x=+\infty$ or $x=-\infty$.
\end{theorem}

<<Theorem: $\forall x, x\in\ExtZZ\iff x\in\ZZ\lor x=-\infty\lor x=+\infty$>>=
theorem Th4:
  for x being object
  holds x is ExtInt iff (x is Integer or x = -infty or x = +infty)
proof
  let x be object;
  thus x is ExtInt implies (x is Integer or x = -infty or x = +infty)
  proof
    assume A1: x is ExtInt;
    assume A2: not x is Integer & not x = -infty;
    x in INT \/ {-infty, +infty} by A1, Def2;
    then x in INT or x in {-infty, +infty} by XBOOLE_0:def 3;
    hence x = +infty by A2, TARSKI:def 2;
  end;
  thus (x is Integer or x = -infty or x = +infty) implies x is ExtInt
  proof
    assume x is Integer or x = -infty or x = +infty;
    then x in INT or x in {-infty,+infty} by INT_1:def 2, TARSKI:def 2;
    then x in INT \/ {-infty,+infty} by XBOOLE_0:def 3;
    hence x is ExtInt by Def2;
  end;
end;
@ %def Th4

\begin{registration}
We observe that zero is an extended integer, as are integers.
\end{registration}

<<Register: 0 is an extended integer, as are integers>>=
registration
  cluster zero -> ext-integer for object;
  coherence;
  cluster integer -> ext-integer for object;
  coherence by Th4;
end;
@

\begin{registration}
We note that ``natural'' numbers are ``extended integer'' numbers.
\end{registration}

<<Register: ``natural'' numbers are ``extended integer'' numbers>>=
registration
  cluster natural -> ext-integer for object;
  coherence;
end;
@ 

\begin{registration}
We can use ``positive'', ``negative'', and their negations, as
adjectives for extended integers.
\end{registration}

<<Register: positive, negative, non-negative, non-positive are adjectives for extended integers>>=
registration
  cluster positive for ExtInt;
  existence
  proof
    take 1;
    thus thesis;
  end;
  cluster non positive for ExtInt;
  existence
  proof
    take -1;
    thus thesis;
  end;
  cluster negative for ExtInt;
  existence
  proof
    take -1;
    thus thesis;
  end;
  cluster non negative for ExtInt;
  existence
  proof
    take 1;
    thus thesis;
  end;
end;
@ 

\begin{registration}
Negating an extended integer is an extended integer.
\end{registration}

<<Register: negating an extended integer is an extended integer>>=
registration
  let m be ExtInt;
  cluster - m -> ext-integer;
  coherence
  proof
    per cases by Th4;
    suppose m is Integer;
      then reconsider M=m as Integer;
      -M is Integer;
      hence thesis by XXREAL_3:def 3;
    end;
    suppose m=-infty;
      hence thesis by XXREAL_3:def 3;
    end;
    suppose m=+infty;
      hence thesis by XXREAL_3:def 3;
    end;
  end;
end;
@ 

\begin{registration}
Addition, subtraction, multiplication, maximum, and minimum of extended integers are extended integers.
\end{registration}

<<Register: Addition, multiplication, maximum, and minimum of extended integers are extended integers.>>=
registration
  let m, n be ExtInt;
  cluster min(m, n) -> ext-integer;
  coherence by XXREAL_0:def 9;
  cluster max(m, n) -> ext-integer;
  coherence by XXREAL_0:def 10;
  cluster m + n -> ext-integer;
  coherence
  <<Proof: adding extended integers yields an extended integer>>
  cluster m * n -> ext-integer;
  coherence
  <<Proof: multiplying extended integers yields an extended integer>>
end;
@

\begin{proof}[Proof sketch (adding extended integers)]
This boils down to a proof by cases, which is thoroughly
unenlightening. When adding integers together, we get an integer; when
adding infinity to an integer, we get an infinity.
\end{proof}

<<Proof: adding extended integers yields an extended integer>>=
proof
  per cases by Th4;
  suppose A1: m is Integer;
    then reconsider M=m as Integer;
    per cases by Th4;
    suppose n is Integer;
      then reconsider N=n as Integer;
      M + N is Integer;
      hence thesis by XXREAL_3:def 2;
    end;
    suppose n=-infty;
      hence thesis by A1, XXREAL_3:def 2;
    end;
    suppose n=+infty;
      hence thesis by A1, XXREAL_3:def 2;
    end;
  end;
  suppose A2: m=-infty;
    per cases by Th4;
    suppose n is Integer;
      hence thesis by A2, XXREAL_3:def 2;
    end;
    suppose n=-infty;
      hence thesis by A2, XXREAL_3:def 2;
    end;
    suppose n=+infty;
      hence thesis by A2;
    end;
  end;
  suppose A3: m=+infty;
    per cases by Th4;
    suppose n is Integer;
      hence thesis by A3, XXREAL_3:def 2;
    end;
    suppose n=-infty;
      hence thesis by A3;
    end;
    suppose n=+infty;
      hence thesis by A3;
    end;
  end;
end;
@ 

\begin{proof}[Proof sketch (multiplying extended integers)]
This boils down to a proof by cases, which is thoroughly
unenlightening. When multiplying integers together, we get an integer; when
multiplying infinity to an integer, we get an infinity.
\end{proof}

<<Proof: multiplying extended integers yields an extended integer>>=
proof
  per cases by Th4;
  suppose m is Integer;
    then reconsider M=m as Integer;
    per cases by Th4;
    suppose n is Integer;
      then reconsider N=n as Integer;
      M * N is Integer;
      hence thesis by XXREAL_3:def 5;
    end;
    suppose B1: n=-infty;
      m is positive or m is negative or m is zero;
      hence thesis by B1, XXREAL_3:def 5;
    end;
    suppose B2: n=+infty;
      m is positive or m is negative or m is zero;
      hence thesis by B2, XXREAL_3:def 5;
    end;
  end;
  suppose A2: m=-infty;
    per cases by Th4;
    suppose n is Integer;
      n is positive or n is negative or n is zero;
      hence thesis by A2, XXREAL_3:def 5;
    end;
    suppose n=-infty;
      hence thesis by A2, XXREAL_3:def 5;
    end;
    suppose n=+infty;
      hence thesis by A2, XXREAL_3:def 5;
    end;
  end;
  suppose A3: m=+infty;
    per cases by Th4;
    suppose n is Integer;
      n is positive or n is negative or n is zero;
      hence thesis by A3, XXREAL_3:def 5;
    end;
    suppose n=-infty;
      hence thesis by A3, XXREAL_3:def 5;
    end;
    suppose n=+infty;
      hence thesis by A3;
    end;
  end;
end;
@

\begin{registration}
Subtracting extended integers yields an extended integer.
\end{registration}

<<Register: subtracting extended integers yields an extended integer>>=
registration
  let m, n be ExtInt;
  cluster m - n -> ext-integer;
  coherence
  proof
    (- n) is ext-integer & m + (- n) is ext-integer &
    m - n = m + (- n) by XXREAL_3:def 4;
    hence thesis;
  end;
end;
@ 

\begin{registration}
Non-negative extended integers are extended naturals.
\end{registration}

<<Register: non-negative extended integers are extended naturals>>=
registration
  cluster non negative -> ext-natural for ExtInt;
  coherence
  proof
    let x be ExtInt;
    assume A1: x is non negative;
    x is Integer or x = -infty or x = +infty by Th4;
    hence thesis by A1;
  end;
end;
@

\begin{theorem}
We have $x$ is a positive extended integer if and only if either $x$ is
a positive integer or $x=+\infty$.
\end{theorem}

<<Theorem: positive extended integers are either positive integers or $+\infty$>>=
theorem
  for x being object
  holds x is positive ExtInt iff (x is positive Integer or x = +infty) by Th4;
@

\begin{theorem}
We have $x$ is a negative extended integer if and only if either $x$ is
a negative integer or $x=-\infty$.
\end{theorem}

<<Theorem: negative extended integers are either negative integers or $-\infty$>>=
theorem
  for x being object
  holds x is negative ExtInt iff (x is negative Integer or x = -infty) by Th4;
@ 